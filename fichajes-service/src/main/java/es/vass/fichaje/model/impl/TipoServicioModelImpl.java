/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.vass.fichaje.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.vass.fichaje.model.TipoServicio;
import es.vass.fichaje.model.TipoServicioModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TipoServicio service. Represents a row in the &quot;Fichaje_TipoServicio&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TipoServicioModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TipoServicioImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TipoServicioImpl
 * @see TipoServicio
 * @see TipoServicioModel
 * @generated
 */
@ProviderType
public class TipoServicioModelImpl extends BaseModelImpl<TipoServicio>
	implements TipoServicioModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tipo servicio model instance should use the {@link TipoServicio} interface instead.
	 */
	public static final String TABLE_NAME = "Fichaje_TipoServicio";
	public static final Object[][] TABLE_COLUMNS = {
			{ "idTipoServicio", Types.BIGINT },
			{ "nombre", Types.VARCHAR },
			{ "computa", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("idTipoServicio", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("computa", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table Fichaje_TipoServicio (idTipoServicio LONG not null primary key,nombre VARCHAR(75) null,computa BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Fichaje_TipoServicio";
	public static final String ORDER_BY_JPQL = " ORDER BY tipoServicio.idTipoServicio ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Fichaje_TipoServicio.idTipoServicio ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.vass.fichaje.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.vass.fichaje.model.TipoServicio"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.vass.fichaje.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.vass.fichaje.model.TipoServicio"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.vass.fichaje.service.util.ServiceProps.get(
				"lock.expiration.time.es.vass.fichaje.model.TipoServicio"));

	public TipoServicioModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idTipoServicio;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdTipoServicio(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idTipoServicio;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TipoServicio.class;
	}

	@Override
	public String getModelClassName() {
		return TipoServicio.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idTipoServicio", getIdTipoServicio());
		attributes.put("nombre", getNombre());
		attributes.put("computa", isComputa());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long idTipoServicio = (Long)attributes.get("idTipoServicio");

		if (idTipoServicio != null) {
			setIdTipoServicio(idTipoServicio);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}

		Boolean computa = (Boolean)attributes.get("computa");

		if (computa != null) {
			setComputa(computa);
		}
	}

	@Override
	public long getIdTipoServicio() {
		return _idTipoServicio;
	}

	@Override
	public void setIdTipoServicio(long idTipoServicio) {
		_idTipoServicio = idTipoServicio;
	}

	@Override
	public String getNombre() {
		if (_nombre == null) {
			return "";
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	@Override
	public boolean getComputa() {
		return _computa;
	}

	@Override
	public boolean isComputa() {
		return _computa;
	}

	@Override
	public void setComputa(boolean computa) {
		_computa = computa;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TipoServicio.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TipoServicio toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TipoServicio)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TipoServicioImpl tipoServicioImpl = new TipoServicioImpl();

		tipoServicioImpl.setIdTipoServicio(getIdTipoServicio());
		tipoServicioImpl.setNombre(getNombre());
		tipoServicioImpl.setComputa(isComputa());

		tipoServicioImpl.resetOriginalValues();

		return tipoServicioImpl;
	}

	@Override
	public int compareTo(TipoServicio tipoServicio) {
		long primaryKey = tipoServicio.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TipoServicio)) {
			return false;
		}

		TipoServicio tipoServicio = (TipoServicio)obj;

		long primaryKey = tipoServicio.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TipoServicio> toCacheModel() {
		TipoServicioCacheModel tipoServicioCacheModel = new TipoServicioCacheModel();

		tipoServicioCacheModel.idTipoServicio = getIdTipoServicio();

		tipoServicioCacheModel.nombre = getNombre();

		String nombre = tipoServicioCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			tipoServicioCacheModel.nombre = null;
		}

		tipoServicioCacheModel.computa = isComputa();

		return tipoServicioCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{idTipoServicio=");
		sb.append(getIdTipoServicio());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append(", computa=");
		sb.append(isComputa());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("es.vass.fichaje.model.TipoServicio");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>idTipoServicio</column-name><column-value><![CDATA[");
		sb.append(getIdTipoServicio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>computa</column-name><column-value><![CDATA[");
		sb.append(isComputa());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TipoServicio.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TipoServicio.class, ModelWrapper.class
		};
	private long _idTipoServicio;
	private String _nombre;
	private boolean _computa;
	private TipoServicio _escapedModel;
}
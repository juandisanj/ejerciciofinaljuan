/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.vass.fichaje.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import es.vass.fichaje.model.Fichaje;
import es.vass.fichaje.model.FichajeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Fichaje service. Represents a row in the &quot;Fichaje_Fichaje&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FichajeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FichajeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FichajeImpl
 * @see Fichaje
 * @see FichajeModel
 * @generated
 */
@ProviderType
public class FichajeModelImpl extends BaseModelImpl<Fichaje>
	implements FichajeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fichaje model instance should use the {@link Fichaje} interface instead.
	 */
	public static final String TABLE_NAME = "Fichaje_Fichaje";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "fichajeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "horaEntrada", Types.TIMESTAMP },
			{ "horaSalida", Types.TIMESTAMP },
			{ "horas", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fichajeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("horaEntrada", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("horaSalida", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("horas", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table Fichaje_Fichaje (uuid_ VARCHAR(75) null,fichajeId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,horaEntrada DATE null,horaSalida DATE null,horas DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table Fichaje_Fichaje";
	public static final String ORDER_BY_JPQL = " ORDER BY fichaje.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Fichaje_Fichaje.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(es.vass.fichaje.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.es.vass.fichaje.model.Fichaje"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(es.vass.fichaje.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.es.vass.fichaje.model.Fichaje"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(es.vass.fichaje.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.vass.fichaje.model.Fichaje"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long HORAENTRADA_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long USERID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(es.vass.fichaje.service.util.ServiceProps.get(
				"lock.expiration.time.es.vass.fichaje.model.Fichaje"));

	public FichajeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fichajeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFichajeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fichajeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Fichaje.class;
	}

	@Override
	public String getModelClassName() {
		return Fichaje.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("fichajeId", getFichajeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("horaEntrada", getHoraEntrada());
		attributes.put("horaSalida", getHoraSalida());
		attributes.put("horas", getHoras());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long fichajeId = (Long)attributes.get("fichajeId");

		if (fichajeId != null) {
			setFichajeId(fichajeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date horaEntrada = (Date)attributes.get("horaEntrada");

		if (horaEntrada != null) {
			setHoraEntrada(horaEntrada);
		}

		Date horaSalida = (Date)attributes.get("horaSalida");

		if (horaSalida != null) {
			setHoraSalida(horaSalida);
		}

		Double horas = (Double)attributes.get("horas");

		if (horas != null) {
			setHoras(horas);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getFichajeId() {
		return _fichajeId;
	}

	@Override
	public void setFichajeId(long fichajeId) {
		_fichajeId = fichajeId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask = -1L;

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getHoraEntrada() {
		return _horaEntrada;
	}

	@Override
	public void setHoraEntrada(Date horaEntrada) {
		_columnBitmask |= HORAENTRADA_COLUMN_BITMASK;

		if (_originalHoraEntrada == null) {
			_originalHoraEntrada = _horaEntrada;
		}

		_horaEntrada = horaEntrada;
	}

	public Date getOriginalHoraEntrada() {
		return _originalHoraEntrada;
	}

	@Override
	public Date getHoraSalida() {
		return _horaSalida;
	}

	@Override
	public void setHoraSalida(Date horaSalida) {
		_horaSalida = horaSalida;
	}

	@Override
	public double getHoras() {
		return _horas;
	}

	@Override
	public void setHoras(double horas) {
		_horas = horas;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Fichaje.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Fichaje toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Fichaje)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FichajeImpl fichajeImpl = new FichajeImpl();

		fichajeImpl.setUuid(getUuid());
		fichajeImpl.setFichajeId(getFichajeId());
		fichajeImpl.setCompanyId(getCompanyId());
		fichajeImpl.setUserId(getUserId());
		fichajeImpl.setUserName(getUserName());
		fichajeImpl.setHoraEntrada(getHoraEntrada());
		fichajeImpl.setHoraSalida(getHoraSalida());
		fichajeImpl.setHoras(getHoras());

		fichajeImpl.resetOriginalValues();

		return fichajeImpl;
	}

	@Override
	public int compareTo(Fichaje fichaje) {
		int value = 0;

		if (getUserId() < fichaje.getUserId()) {
			value = -1;
		}
		else if (getUserId() > fichaje.getUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Fichaje)) {
			return false;
		}

		Fichaje fichaje = (Fichaje)obj;

		long primaryKey = fichaje.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FichajeModelImpl fichajeModelImpl = this;

		fichajeModelImpl._originalUuid = fichajeModelImpl._uuid;

		fichajeModelImpl._originalCompanyId = fichajeModelImpl._companyId;

		fichajeModelImpl._setOriginalCompanyId = false;

		fichajeModelImpl._originalHoraEntrada = fichajeModelImpl._horaEntrada;

		fichajeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Fichaje> toCacheModel() {
		FichajeCacheModel fichajeCacheModel = new FichajeCacheModel();

		fichajeCacheModel.uuid = getUuid();

		String uuid = fichajeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fichajeCacheModel.uuid = null;
		}

		fichajeCacheModel.fichajeId = getFichajeId();

		fichajeCacheModel.companyId = getCompanyId();

		fichajeCacheModel.userId = getUserId();

		fichajeCacheModel.userName = getUserName();

		String userName = fichajeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			fichajeCacheModel.userName = null;
		}

		Date horaEntrada = getHoraEntrada();

		if (horaEntrada != null) {
			fichajeCacheModel.horaEntrada = horaEntrada.getTime();
		}
		else {
			fichajeCacheModel.horaEntrada = Long.MIN_VALUE;
		}

		Date horaSalida = getHoraSalida();

		if (horaSalida != null) {
			fichajeCacheModel.horaSalida = horaSalida.getTime();
		}
		else {
			fichajeCacheModel.horaSalida = Long.MIN_VALUE;
		}

		fichajeCacheModel.horas = getHoras();

		return fichajeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", fichajeId=");
		sb.append(getFichajeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", horaEntrada=");
		sb.append(getHoraEntrada());
		sb.append(", horaSalida=");
		sb.append(getHoraSalida());
		sb.append(", horas=");
		sb.append(getHoras());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("es.vass.fichaje.model.Fichaje");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fichajeId</column-name><column-value><![CDATA[");
		sb.append(getFichajeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>horaEntrada</column-name><column-value><![CDATA[");
		sb.append(getHoraEntrada());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>horaSalida</column-name><column-value><![CDATA[");
		sb.append(getHoraSalida());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>horas</column-name><column-value><![CDATA[");
		sb.append(getHoras());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Fichaje.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Fichaje.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _fichajeId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _horaEntrada;
	private Date _originalHoraEntrada;
	private Date _horaSalida;
	private double _horas;
	private long _columnBitmask;
	private Fichaje _escapedModel;
}